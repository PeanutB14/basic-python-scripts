import random
import sys
from typing import Tuple, Optional

class NumberGuessingGame:
    """Enhanced number guessing game with multiple difficulty levels and features"""
    
    def __init__(self):
        self.score = 0
        self.games_played = 0
        self.total_attempts = 0
        self.best_score = float('inf')
        self.difficulty_ranges = {
            'easy': (1, 10),
            'medium': (1, 50), 
            'hard': (1, 100),
            'expert': (1, 500)
        }
        self.max_attempts = {
            'easy': 4,
            'medium': 7,
            'hard': 10,
            'expert': 15
        }
    
    def display_welcome(self):
        """Display welcome message and rules"""
        print("🎮 " + "="*50)
        print("    WELCOME TO THE NUMBER GUESSING GAME!")
        print("="*52)
        print("\n📋 RULES:")
        print("• I'll think of a number within your chosen range")
        print("• You have limited attempts based on difficulty")
        print("• Get hints after each wrong guess")
        print("• Try to guess with minimum attempts for higher score!")
        print("\n🏆 DIFFICULTY LEVELS:")
        for level, (min_val, max_val) in self.difficulty_ranges.items():
            attempts = self.max_attempts[level]
            print(f"• {level.title()}: {min_val}-{max_val} ({attempts} attempts)")
        print()
    
    def get_difficulty(self) -> str:
        """Get difficulty choice from user"""
        while True:
            print("🎯 Choose difficulty level:")
            print("1. Easy (1-10)")
            print("2. Medium (1-50)")  
            print("3. Hard (1-100)")
            print("4. Expert (1-500)")
            print("5. Custom range")
            
            try:
                choice = input("\nEnter your choice (1-5): ").strip()
                
                if choice == '1':
                    return 'easy'
                elif choice == '2':
                    return 'medium'
                elif choice == '3':
                    return 'hard'
                elif choice == '4':
                    return 'expert'
                elif choice == '5':
                    return self.setup_custom_game()
                else:
                    print("❌ Invalid choice! Please enter 1-5.")
                    
            except (ValueError, KeyboardInterrupt):
                print("\n❌ Invalid input! Please try again.")
    
    def setup_custom_game(self) -> str:
        """Setup custom difficulty range"""
        try:
            print("\n🔧 CUSTOM GAME SETUP:")
            min_val = int(input("Enter minimum number: "))
            max_val = int(input("Enter maximum number: "))
            
            if min_val >= max_val:
                print("❌ Maximum must be greater than minimum!")
                return self.get_difficulty()
            
            # Calculate reasonable number of attempts
            range_size = max_val - min_val + 1
            attempts = min(20, max(3, int(range_size ** 0.5) + 2))
            
            self.difficulty_ranges['custom'] = (min_val, max_val)
            self.max_attempts['custom'] = attempts
            
            print(f"✅ Custom game: {min_val}-{max_val} with {attempts} attempts")
            return 'custom'
            
        except ValueError:
            print("❌ Please enter valid numbers!")
            return self.get_difficulty()
    
    def get_valid_guess(self, min_val: int, max_val: int) -> Optional[int]:
        """Get and validate user's guess"""
        try:
            guess_input = input(f"🎯 Guess a number between {min_val} and {max_val} (or 'quit' to exit): ").strip()
            
            if guess_input.lower() in ['quit', 'exit', 'q']:
                return None
                
            guess = int(guess_input)
            
            if not (min_val <= guess <= max_val):
                print(f"❌ Please enter a number between {min_val} and {max_val}!")
                return self.get_valid_guess(min_val, max_val)
                
            return guess
            
        except ValueError:
            print("❌ Please enter a valid number!")
            return self.get_valid_guess(min_val, max_val)
    
    def give_hint(self, guess: int, target: int, min_val: int, max_val: int) -> str:
        """Provide intelligent hints based on the guess"""
        diff = abs(guess - target)
        range_size = max_val - min_val + 1
        
        # Distance-based hints
        if diff == 1:
            hint = "🔥 So close! You're just 1 number away!"
        elif diff <= range_size * 0.1:
            hint = "🔥 Very hot! You're very close!"
        elif diff <= range_size * 0.25:
            hint = "♨️ Hot! Getting warmer!"
        elif diff <= range_size * 0.5:
            hint = "🌡️ Warm! You're on the right track!"
        else:
            hint = "❄️ Cold! You're quite far off!"
        
        # Direction hint
        if guess < target:
            direction = "📈 Try a HIGHER number!"
        else:
            direction = "📉 Try a LOWER number!"
        
        return f"{hint} {direction}"
    
    def calculate_score(self, attempts: int, max_attempts: int, difficulty: str) -> int:
        """Calculate score based on performance"""
        # Base score multipliers for difficulty
        multipliers = {'easy': 10, 'medium': 25, 'hard': 50, 'expert': 100, 'custom': 30}
        base_score = multipliers.get(difficulty, 30)
        
        # Bonus for fewer attempts (more points for guessing quickly)
        efficiency_bonus = max(0, (max_attempts - attempts) * 5)
        
        return base_score + efficiency_bonus
    
    def play_single_game(self, difficulty: str) -> bool:
        """Play a single round of the game"""
        min_val, max_val = self.difficulty_ranges[difficulty]
        max_attempts = self.max_attempts[difficulty]
        target_number = random.randint(min_val, max_val)
        
        print(f"\n🎲 NEW GAME - {difficulty.title()} Mode")
        print(f"🎯 I'm thinking of a number between {min_val} and {max_val}")
        print(f"🎪 You have {max_attempts} attempts. Good luck!")
        print("-" * 50)
        
        attempts = 0
        
        while attempts < max_attempts:
            attempts += 1
            remaining = max_attempts - attempts + 1
            
            print(f"\n🔄 Attempt {attempts}/{max_attempts} (Remaining: {remaining-1})")
            
            guess = self.get_valid_guess(min_val, max_val)
            
            if guess is None:  # User wants to quit
                print(f"👋 Game ended. The number was {target_number}")
                return False
            
            if guess == target_number:
                # Success!
                print("\n" + "🎉" * 20)
                print(f"🏆 CONGRATULATIONS! You guessed it RIGHT!")
                print(f"✨ The number was indeed {target_number}")
                print(f"⚡ You did it in {attempts}/{max_attempts} attempts!")
                
                # Calculate and update score
                round_score = self.calculate_score(attempts, max_attempts, difficulty)
                self.score += round_score
                self.total_attempts += attempts
                
                if attempts < self.best_score:
                    self.best_score = attempts
                    print(f"🏅 NEW PERSONAL BEST! Fewest attempts: {attempts}")
                
                print(f"📊 Round Score: +{round_score} points")
                print("🎉" * 20)
                return True
            else:
                # Wrong guess - give hint
                hint = self.give_hint(guess, target_number, min_val, max_val)
                print(f"❌ Wrong! {hint}")
                
                if attempts < max_attempts:
                    print(f"💪 Keep trying! {max_attempts - attempts} attempts left.")
        
        # Game over - no more attempts
        print("\n" + "💔" * 20)
        print(f"😔 Game Over! You've used all {max_attempts} attempts.")
        print(f"🎯 The correct number was: {target_number}")
        print("💔" * 20)
        self.total_attempts += attempts
        return False
    
    def display_statistics(self):
        """Display player statistics"""
        if self.games_played == 0:
            return
            
        win_rate = (self.score > 0) and (self.games_played > 0)
        avg_attempts = self.total_attempts / self.games_played if self.games_played > 0 else 0
        
        print("\n📊 " + "="*30)
        print("     GAME STATISTICS")
        print("="*32)
        print(f"🎮 Games Played: {self.games_played}")
        print(f"🏆 Total Score: {self.score}")
        print(f"🎯 Average Attempts: {avg_attempts:.1f}")
        if self.best_score != float('inf'):
            print(f"🥇 Best Performance: {self.best_score} attempts")
        print(f"⚡ Total Attempts: {self.total_attempts}")
        print("="*32)
    
    def play(self):
        """Main game loop"""
        self.display_welcome()
        
        try:
            while True:
                difficulty = self.get_difficulty()
                self.games_played += 1
                
                won = self.play_single_game(difficulty)
                
                # Ask if player wants to continue
                print(f"\n{'='*50}")
                while True:
                    continue_game = input("🎮 Play another round? (y/n): ").lower().strip()
                    if continue_game in ['y', 'yes', '1']:
                        break
                    elif continue_game in ['n', 'no', '0']:
                        break
                    else:
                        print("❌ Please enter 'y' for yes or 'n' for no.")
                
                if continue_game in ['n', 'no', '0']:
                    break
            
        except KeyboardInterrupt:
            print("\n\n👋 Game interrupted by user.")
        
        finally:
            # Display final statistics
            self.display_statistics()
            print("\n🙏 Thanks for playing! Come back soon! 🎮")

def main():
    """Main function to start the game"""
    game = NumberGuessingGame()
    game.play()

if __name__ == "__main__":
    main()
